"use strict";(self.webpackChunkjenova_docs=self.webpackChunkjenova_docs||[]).push([[798],{6282:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>g,frontMatter:()=>r,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"Code Test","title":"Code Test","description":"Press Shift + Fuck You","source":"@site/pages/Code Test.md","sourceDirName":".","slug":"/Code Test","permalink":"/docs/pages/Code Test","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"hide_table_of_contents":false},"sidebar":"documentationSidebar","previous":{"title":"Getting Started","permalink":"/docs/pages/GettingStarted"}}');var s=n(4848),o=n(8453);const r={hide_table_of_contents:!1},l="Code Test",i={},c=[{value:"Tip 05 : Third-Party Languages Functions Calling",id:"tip-05--third-party-languages-functions-calling",level:2},{value:"Non-Static Function Calling",id:"non-static-function-calling",level:3},{value:"Static Function Calling",id:"static-function-calling",level:3},{value:"Calling C++ Script Functions from GDScript",id:"calling-c-script-functions-from-gdscript",level:2},{value:"[ Tip 04 : Using .NET/C# Within Jenova ]",id:"-tip-04--using-netc-within-jenova-",level:2}];function d(e){const t={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"code-test",children:"Code Test"})}),"\n",(0,s.jsxs)(t.p,{children:["Press ",(0,s.jsx)("kbd",{children:"Shift"})," + ",(0,s.jsx)("kbd",{children:"Fuck You"})]}),"\n",(0,s.jsx)(t.h2,{id:"tip-05--third-party-languages-functions-calling",children:"Tip 05 : Third-Party Languages Functions Calling"}),"\n",(0,s.jsx)(t.p,{children:"You can call a function from third-party languages like GDScript, C#, Python etc. from a Jenova C++ Script."}),"\n",(0,s.jsx)(t.h3,{id:"non-static-function-calling",children:"Non-Static Function Calling"}),"\n",(0,s.jsxs)(t.p,{children:["Let's say we have this function in a built-in GDScript on a Node at ",(0,s.jsx)(t.code,{children:"Root/Node3D"})]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-gdscript",metastring:'title="GDScript"',children:"func add_five_and_double_it(value: int) -> int:\n    var result = (value + 5) * 2\n    return result\n"})}),"\n",(0,s.jsx)(t.p,{children:"Now to call the function we simply do this in Jenova C++ Script :"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-jenova",metastring:'title="Jenova C++ Script" showLineNumbers ',children:'// Called On Every Frame\nvoid OnProcess(Variant* _delta)\n{\n    auto node3d = GetNode<Node>("Root/Node3D");\n    auto result = node3d->call("add_five_and_double_it", 10);\n    Output("GDScript Function Result : %d", int(result));\n}\n'})}),"\n",(0,s.jsx)(t.p,{children:"Simple as that!"}),"\n",(0,s.jsx)(t.h3,{id:"static-function-calling",children:"Static Function Calling"}),"\n",(0,s.jsx)(t.p,{children:"Now let's say we have a static function in a GDScript :"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:"static func add_nine_and_double_it(value: int) -> int:\n    var result = (value + 9) * 2\n    return result\n"})}),"\n",(0,s.jsx)(t.p,{children:"This is how we can call into it :"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-CPP",children:'// Called On Every Frame\nvoid OnProcess(Variant* _delta)\n{\n    auto node = GetNode<Node>("Root/Node3D");\n    auto script = node->get_script();\n    if (!script.get_type() == Variant::NIL)\n    {\n        auto result = node->call("add_nine_and_double_it", 100);\n        Output("GDScript Function Result : %d", int(result));\n    }\n}\n'})}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Note :"})," Previous method also works on static methods but this one is provided as an alternative for static functions."]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"calling-c-script-functions-from-gdscript",children:"Calling C++ Script Functions from GDScript"}),"\n",(0,s.jsx)(t.p,{children:"Here's opposite example of what we did above, Let's say we have this C++ function :"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-CPP",children:"Variant SumUp(int a, int b)\n{\n    return a + b;\n}\n"})}),"\n",(0,s.jsx)(t.p,{children:"This is how we call it from GDScript:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:'func _process(delta):\n    var result = get_node("Root/Obj").call("SumUp", 10, 15);\n    print("C++ Function Result : %d" % result);\n'})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsxs)(t.strong,{children:["Remember to always return a ",(0,s.jsx)(t.code,{children:"Variant"})," to GDScript as all values in GDScript are ",(0,s.jsx)(t.code,{children:"Variant"}),"."]}),"\nIt's also possible to call another Jenova C++ Script from Jenova C++ Script or GDScript, C# etc."]}),"\n",(0,s.jsx)(t.h2,{id:"-tip-04--using-netc-within-jenova-",children:"[ Tip 04 : Using .NET/C# Within Jenova ]"}),"\n",(0,s.jsxs)(t.p,{children:["It's possible to integrate .NET and C# directly in Jenova by using external linking just like regular native modules. To do such thing you will need to use ",(0,s.jsx)(t.a,{href:"https://github.com/3F/DllExport",children:"DllExport"})," NuGet Package and export functions from your .NET module, Then simply link against it in Jenova."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"C# Side"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-CSharp",children:"[DllExport] public static bool ManagedOperation(string commandName)\n{\n    return true;\n}\n"})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"C++ Side"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-CPP",children:'extern "C" _declspec(dllimport) bool ManagedOperation(char* commandName)\n'})}),"\n",(0,s.jsx)(t.p,{children:"This method works on all versions of Windows which have .Net Framework installed."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-JENOVA",metastring:"showLineNumbers ",children:'\n// Godot SDK\n#include <Godot/godot.hpp>\n#include <Godot/classes/node.hpp>\n#include <Godot/classes/input.hpp>\n#include <Godot/classes/text_edit.hpp>\n#include <Godot/classes/rich_text_label.hpp>\n#include <Godot/classes/panel_container.hpp>\n#include <Godot/classes/v_box_container.hpp>\n#include <Godot/classes/scroll_container.hpp>\n#include <Godot/classes/v_scroll_bar.hpp>\n#include <Godot/classes/scene_tree.hpp>\n#include <Godot/classes/canvas_layer.hpp>\n#include <Godot/variant/variant.hpp>\n\n// Shared Header\n#include "Code/Include/Shared.hpp"\n\n// Jenova SDK\n#include <JenovaSDK.h>\n\n// JenovaLLM SDK\n#include <JenovaLLM.h>\n\n// Set Class Name\nJENOVA_CLASS_NAME("JenovaLLM Chatbot")\n\n// Namespaces\nusing namespace godot;\nusing namespace jenova::sdk;\n\n// Global Memory Identifiers\nconstexpr const char* llmCoreID = "llmCore";\n\n// Local Variables\nbool scrollNeedsUpdate = false;\n\n// Instances\nJenovaLLM::Core* llmCore = nullptr;\nJenovaLLM::Actor* llmActor = nullptr;\n\n// Helper Templates\ntemplate <typename T> T* GetPropertyNode(const String nodePath)\n{\n\tT* nodePtr = GetNode<T>("Lab/Stage/Chatbot/" + nodePath);\n\treturn nodePtr;\n}\n\n// Forward Declarations\nvoid ResponseCallback(JenovaLLM::Actor* actor, const JenovaLLM::Response& response);\n\n// Message Manager Class\nclass MessageManager : public RefCounted\n{\n\tGDCLASS(MessageManager, RefCounted);\n\nprotected:\n\tstatic void _bind_methods()\n\t{\n\t\tClassDB::bind_method(D_METHOD("AddNewAIMessage"), &MessageManager::AddNewAIMessage);\n\t\tClassDB::bind_method(D_METHOD("AppendNewAIMessage"), &MessageManager::AppendNewAIMessage);\n\t\tClassDB::bind_method(D_METHOD("CommitAIMessage"), &MessageManager::CommitAIMessage);\n\t\tClassDB::bind_method(D_METHOD("CommitUserMessage"), &MessageManager::CommitUserMessage);\n\t\tClassDB::bind_method(D_METHOD("ClearMessages"), &MessageManager::ClearMessages);\n\t\tClassDB::bind_method(D_METHOD("GetUserMessage"), &MessageManager::GetUserMessage);\n\t}\n\npublic:\n\tvoid AddNewAIMessage();\n\tvoid AppendNewAIMessage(String messageContent);\n\tvoid CommitAIMessage();\n\tString CommitUserMessage();\n\tvoid ClearMessages();\n\tvoid GetUserMessage();\n\tPanelContainer* GetLastMessage();\n\tvoid SetUIState(bool uiState);\n};\n\n// Message Manager Instance\nRef<MessageManager> msgMan;\n\n// Message Manager Register/Unregister/Getter\nvoid RegisterMessageManager()\n{\n\t// Register Classes\n\tClassDB::register_class<MessageManager>();\n\n\t// Finish Reload\n\tsakura::FinishReload("MessageManager");\n}\nvoid UnregisterMessageManager()\n{\n\t// Prepare for Reload\n\tsakura::PrepareReload("MessageManager");\n\n\t// Release Class\n\tsakura::Dispose("MessageManager");\n}\nRef<MessageManager> GetMessageManager()\n{\n\tif (msgMan.is_null() || !msgMan.is_valid()) msgMan.instantiate();\n\treturn msgMan;\n}\n\n// Start Jenvoa Script\nJENOVA_SCRIPT_BEGIN\n\n// Properties\nJENOVA_PROPERTY(NodePath, ai_msg_template, "")\nJENOVA_PROPERTY(NodePath, user_msg_template, "")\nJENOVA_PROPERTY(NodePath, chat_container, "")\nJENOVA_PROPERTY(NodePath, chat_scroll, "")\nJENOVA_PROPERTY(NodePath, chat_placeholder, "")\nJENOVA_PROPERTY(NodePath, control_button_label, "")\n\n// Node Events\nvoid OnAwake(Caller* instance)\n{\n\t// Create/Allocate Global LLM Core\n\tllmCore = GlobalPointer<JenovaLLM::Core>(llmCoreID);\n\tif (llmCore == nullptr)\n\t{\n\t\tllmCore = JenovaLLM::CreateNewCore();\n\t\tSetGlobalPointer(llmCoreID, llmCore);\n\t}\n\n\t// Create Global Variables\n\tSetGlobalVariable("IsWaitingForUserInput", false);\n\tSetGlobalVariable("IsChatEnabled", false);\n\n\t// Initialize Message Manager\n\tmsgMan.instantiate();\n}\nvoid OnDestroy(Caller* instance)\n{\n\t// Release Global LLM Core\n\tif (llmCore)\n\t{\n\t\tif (!llmCore->Release()) Alert("Error : Failed to Release Jenova LLM Core.");\n\t\tdelete llmCore;\n\t}\n\n\t// Release Message Manager\n\tmsgMan.unref();\n}\nvoid OnReady(Caller* instance)\n{\n\t// Retrive Global LLM Core\n\tllmCore = GlobalPointer<JenovaLLM::Core>(llmCoreID);\n\n\t// Initialize LLM Core\n\tJenovaLLM::CoreSettings coreSettings;\n\tcoreSettings.context_size = 16192;\n\tcoreSettings.cpu_max_threads = 1;\n\tcoreSettings.gpu_max_threads = 999;\n\tcoreSettings.main_gpu_index = 0;\n\tif (!llmCore->Initialize(coreSettings))\n\t{\n\t\tAlert("Error : Failed to Initialzie Jenova LLM Core.");\n\t};\n\n\t// Verbose\n\tOutput("JenovaLLM Initialized.");\n}\nvoid OnProcess(Caller* instance, Variant* _delta)\n{\n\t// Update Chat Scroll If Needed\n\tif (scrollNeedsUpdate)\n\t{\n\t\tauto* chatScroll = GetPropertyNode<ScrollContainer>(chat_scroll);\n\t\tchatScroll->call_deferred("set_v_scroll", chatScroll->get_v_scroll_bar()->get_max());\n\t\tscrollNeedsUpdate = false;\n\t}\n\n\t// Check for Key Actions\n\tif (Input::get_singleton()->is_action_just_pressed("send_user_message") \n\t\t&& GlobalVariable<bool>("IsWaitingForUserInput") \n\t\t&& GlobalVariable<bool>("IsChatEnabled"))\n\t{\n\t\t// Commit User Input\n\t\tSetGlobalVariable("IsWaitingForUserInput", false);\n\t\tString userInput = GetMessageManager()->CommitUserMessage();\n\t\n\t\t// Start Chat\n\t\tif (llmActor)\n\t\t{\n\t\t\t// Call Chat Function On New Thread\n\t\t\tstd::thread([userInput]()\n\t\t\t{\n\t\t\t\tGetMessageManager()->call_deferred("AddNewAIMessage");\n\t\t\t\tllmActor->Chat(JenovaLLM::Message(GetCStr(userInput)), JenovaLLM::ResponseType::Callback);\n\t\t\t\tGetMessageManager()->call_deferred("CommitAIMessage");\n\t\t\t}).detach();\n\t\t}\n\t}\n}\n\n// UI Callbacks\nvoid OnChatStateSwitch()\n{\n\t// Retrive Global LLM Core\n\tllmCore = GlobalPointer<JenovaLLM::Core>(llmCoreID);\n\n\t// Enable Chat\n\tif (!GlobalVariable<bool>("IsChatEnabled"))\n\t{\n\t\t// Load Model\n\t\tOutput("Loading JenovaLLM Model...");\n\t\tif (!llmCore->LoadModel("F:/Temp Move/LLMs/L3.2-Rogue-Creative-Instruct-Uncensored-7B-D_AU-Q4_k_m.gguf"))\n\t\t{\n\t\t\tAlert("Error : Failed to Load LLM Model.");\n\t\t};\n\t\tOutput("JenovaLLM Model Loaded.");\n\n\t\t// Create Assistant Actor\n\t\tOutput("Creating Assistant Actor...");\n\t\tllmActor = llmCore->CreateNewActor("GodotJenovaLLM", JenovaLLM::ActorType::Assistant);\n\t\tif (!llmActor)\n\t\t{\n\t\t\tAlert("Error : Failed to Create Jenova LLM Assistant Actor.");\n\t\t\treturn;\n\t\t}\n\n\t\t// Set Audience Name\n\t\tllmActor->SetAudienceName("GameDeveloper");\n\n\t\t// Set Response Callback\n\t\tllmActor->SetResponeCallback(ResponseCallback);\n\n\t\t// Push Narrative\n\t\tllmActor->PushNarrative("You are JenovaLLM an AI Assistant developed by your developer Hamid.Memar. Your purpose is to help user with Game Development. Do not use Markdown in your responses.");\n\n\t\t// Set Persona\n\t\tllmActor->SetPersona("You are Friendly, Cool and Helpful.");\n\n\t\t// Set First Message Memory\n\t\tllmActor->AddMemory(llmActor->GetName(), "Hello, How can I assist you today?");\n\t\tGetMessageManager()->AddNewAIMessage();\n\t\tGetMessageManager()->AppendNewAIMessage("Hello, How can I assist you today?");\n\n\t\t// Chat Enabled\n\t\tGetPropertyNode<RichTextLabel>(control_button_label)->set_text("[center][color=#bad4c1]Stop Chatbot[/color][center]");\n\t\tGetPropertyNode<PanelContainer>(chat_placeholder)->set_visible(false);\n\t\tSetGlobalVariable("IsChatEnabled", true);\n\n\t\t// Commit AI Message & Get User Message\n\t\tGetMessageManager()->CommitAIMessage();\n\n\t\t// All Good\n\t\treturn;\n\t}\n\n\t// Disable Chat\n\tif (GlobalVariable<bool>("IsChatEnabled"))\n\t{\n\t\t// Clear Messages\n\t\tGetMessageManager()->ClearMessages();\n\n\t\t// Delete Assistant Actor\n\t\tif (llmActor)\n\t\t{\n\t\t\tif (!llmCore->DeleteActor(llmActor))\n\t\t\t{\n\t\t\t\tAlert("Error : Failed to Delete Jenova LLM Assistant Actor.");\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// Unload Model\n\t\tif (!llmCore->UnloadModel())\n\t\t{\n\t\t\tAlert("Error : Failed to Unload LLM Model.");\n\t\t};\n\n\t\t// Chat Disabled\n\t\tGetPropertyNode<RichTextLabel>(control_button_label)->set_text("[center][color=#bad4c1]Start Chatbot[/color][center]");\n\t\tGetPropertyNode<PanelContainer>(chat_placeholder)->set_visible(true);\n\t\tSetGlobalVariable("IsChatEnabled", false);\n\n\t\t// All Good\n\t\treturn;\n\t}\n}\n\n// End Jenova Script\nJENOVA_SCRIPT_END\n\n// Helper Functions\nvoid MessageManager::AddNewAIMessage()\n{\n\tauto* templatePanel = GetPropertyNode<PanelContainer>(ai_msg_template);\n\tauto* chatContainer = GetPropertyNode<VBoxContainer>(chat_container);\n\tauto* chatScroll = GetPropertyNode<ScrollContainer>(chat_scroll);\n\tif (templatePanel && chatContainer && chatScroll)\n\t{\n\t\tPanelContainer* newMessagePanel = (PanelContainer*)templatePanel->duplicate();\n\t\tRichTextLabel* messageLabel = newMessagePanel->get_node<RichTextLabel>("Message");\n\t\tmessageLabel->set_text("[color=#f5b042]AI :[/color] ");\n\t\tchatContainer->add_child(newMessagePanel);\n\t\tnewMessagePanel->set_visible(true);\n\t\tscrollNeedsUpdate = true;\n\t}\n\n\t// Enable UI/Input Blocker\n\tSetUIState(true);\n}\nvoid MessageManager::AppendNewAIMessage(String messageContent)\n{\n\tPanelContainer* lastMessagePanel = GetLastMessage();\n\tRichTextLabel* messageLabel = lastMessagePanel->get_node<RichTextLabel>("Message");\n\tmessageLabel->set_text(messageLabel->get_text() + messageContent);\n\tscrollNeedsUpdate = true;\n}\nvoid MessageManager::CommitAIMessage()\n{\n\t// Disable UI/Input Blocker\n\tSetUIState(false);\n\n\t// Wait for User Input\n\tGetUserMessage();\n}\nString MessageManager::CommitUserMessage()\n{\n\tPanelContainer* lastMessagePanel = GetLastMessage();\n\tTextEdit* messageInput = lastMessagePanel->get_node<TextEdit>("Input");\n\tRichTextLabel* messageLabel = lastMessagePanel->get_node<RichTextLabel>("Message");\n\tmessageInput->set_visible(false);\n\tmessageLabel->set_text(Format("[color=#42a7f5]You :[/color] %s", GetCStr(messageInput->get_text())));\n\tmessageLabel->set_visible(true);\n\tscrollNeedsUpdate = true;\n\treturn messageInput->get_text();\n}\nvoid MessageManager::ClearMessages()\n{\n\tauto* chatContainer = GetPropertyNode<VBoxContainer>(chat_container);\n\tTypedArray<Node> chatMessages = chatContainer->get_children();\n\tif (chatMessages.size() > 2)\n\t{\n\t\tfor (size_t i = 2; i < chatMessages.size(); i++)\n\t\t{\n\t\t\tif (auto* chatMessage = Object::cast_to<PanelContainer>(chatMessages[i])) chatMessage->queue_free();\n\t\t}\n\t}\n}\nvoid MessageManager::GetUserMessage()\n{\n\tauto* templatePanel = GetPropertyNode<PanelContainer>(user_msg_template);\n\tauto* chatContainer = GetPropertyNode<VBoxContainer>(chat_container);\n\tauto* chatScroll = GetPropertyNode<ScrollContainer>(chat_scroll);\n\tif (templatePanel && chatContainer && chatScroll)\n\t{\n\t\tPanelContainer* newMessagePanel = (PanelContainer*)templatePanel->duplicate();\n\t\tchatContainer->add_child(newMessagePanel);\n\t\tTextEdit* messageInput = newMessagePanel->get_node<TextEdit>("Input");\n\t\tnewMessagePanel->set_visible(true);\n\t\tmessageInput->grab_focus();\n\t\tSetGlobalVariable("IsWaitingForUserInput", true);\n\t\tscrollNeedsUpdate = true;\n\t}\n}\nPanelContainer* MessageManager::GetLastMessage()\n{\n\tauto* chatContainer = GetPropertyNode<VBoxContainer>(chat_container);\n\tTypedArray<Node> chatMessages = chatContainer->get_children();\n\treturn Object::cast_to<PanelContainer>(chatMessages[chatMessages.size() - 1]);\n}\nvoid MessageManager::SetUIState(bool uiState)\n{\n\tNode* referenceArray = GetReferenceArray();\n\tif (referenceArray)\n\t{\n\t\tNodePath inputBlockerPath = referenceArray->call("GetStoredValueByName", String("InputBlocker"));\n\t\tCanvasLayer* inputBlocker = GetNode<CanvasLayer>(String(referenceArray->get_path()) + "/" + String(inputBlockerPath));\n\t\tif (inputBlocker) inputBlocker->set_visible(uiState);\n\t}\n}\n\n// LLM Callbacks\nvoid ResponseCallback(JenovaLLM::Actor* actor, const JenovaLLM::Response& response)\n{\n\tGetMessageManager()->call_deferred("AppendNewAIMessage", String(response.c_str()));\n}\n\n'})})]})}function g(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>l});var a=n(6540);const s={},o=a.createContext(s);function r(e){const t=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(o.Provider,{value:t},e.children)}}}]);